// -------------
// Media Query
// -------------

$_media-sizes: (
  xs: $size-xs,
  s: $size-s,
  m: $size-m,
  l: $size-l,
);

// Map a keyword to the pixel size
// @return the pixel size
@function _getSize( $name ) {
  $_size: 0;

  // if number, return it as it is
  @if type-of($name) == number {
    $_size: $name;
  }
  // if keyword, get from the map
  @else {
    $_size: map-get($_media-sizes, $name);
  }

  @return $_size;
}

// Media query for below or equal the size
@function below( $size ) {
  $_size: _getSize($size);
  @return "max-width: #{$_size}";
}

// Media query for above the size
@function above( $size ) {
  $size: _getSize($size) + 1px;
  @return "min-width: #{$size}";
}


// -------------
// EM CONVERTER
// -------------

// Convert PX value to EM
//
// Usage:
//   font-size: em( 20px );
//   padding: em( 8px 16px 12px );
// Result:
//   font-size: 1.25em;
//   padding: em( 0.5em 1em 0.75em );

@function em($values, $base: $font-size) {
  // if only contain single number, convert it directly
  @if type-of($values) == number {
    @return _convertToEm($values, $base);
  }

  // if contains multiple values, loop through it
  $emValues   : ();
  @each $val in $values {
    $emValues: append($emValues, _convertToEm($val, $base) );
  }
  @return join((), $emValues, space );
}

// Strips unit and return plain number
@function _stripUnit($num) {
  @return $num / ($num * 0 + 1);
}

// Convert the number to EM
@function _convertToEm($value, $base: $font-size) {
  // if not number, return it as is
  @if type-of($value) != number { @return $value; }

  $value: _stripUnit($value) / _stripUnit($base) * 1em;
  // turn 0em into 0
  @if ($value == 0em) {
    $value: 0;
  }
  @return $value;
}



// Create font sizes in various media query
//
// Usage:
//   @include font-sizes( ( base:20px, s: 18px ) );
// Result:
//   font-size: 20px;
//   @media (max-width:767px) { font-size: 18px; }

@mixin font-sizes( $sizes, $context: $font-size ) {
  @each $media, $s in $sizes {
    $size: em( $s, $context );

    @if $media == base {
      font-size: $size;
    }
    @else {
      @media ( below($media) ) { font-size: $size; }
    }
  }
}


// -----------
// SVG ENCODE
// -----------

// Encode SVG data to the format that's compatible with CSS
//
// Usage:
//   background-image: svg-encode('<svg xmlns="http://www.w3.org/2000/svg"> ... </svg>');
// Result:
//   background-image: url("data:image/svg+xml;charset=utf8,%3Csvg xmlns='http://www.w3.org/2000/svg'%3E% ... %3C/svg%3E");

@function svg-encode( $svg ) {
  $encoded: '';
  $slice: 2000;
  $index: 0;
  $loops: ceil(str-length($svg) / $slice);

  @for $i from 1 through $loops {
    $chunk: str-slice($svg, $index, $index + $slice - 1);
    $chunk: _str-replace($chunk, '"', "'");
    $chunk: _str-replace($chunk, '<', '%3C');
    $chunk: _str-replace($chunk, '>', '%3E');
    $chunk: _str-replace($chunk, '&', '%26');
    $chunk: _str-replace($chunk, '#', '%23');
    $encoded: #{$encoded}#{$chunk};
    $index: $index + $slice;
  }

  @return url("data:image/svg+xml;charset=utf8,#{$encoded}");
}

/// Replace `$search` with `$replace` in `$string`
@function _str-replace( $string, $search, $replace: '' ) {
  $index: str-index($string, $search);

  @if $index {
    @return str-slice($string, 1, $index - 1) + $replace + _str-replace(str-slice($string, $index + str-length($search)), $search, $replace);
  }

  @return $string;
}


// -------------
// TRIANGLE
// -------------

// Create triangle shape using border. Mostly applied in ::before / ::after pseudoselecter.
//
// Usage:
//   @include triangle( n, #333, 20px, 12px );
@mixin triangle(
  $direction,
  $color,
  $width,
  $height: false) {

  // If height is not specified, make the triangle equalateral
  @if not $height {
    @if $direction in (n, e, s, w) {
      $height : ($width / 2) * 1.732;
    }
    @else if $direction in (ne, se, sw, nw) {
      $height : $width;
    }
  }

  width: 0;
  height: 0;
  font-size: 0;
  line-height: 0%;
  border-style: solid;
  border-color: transparent;


  @if $direction == n {
    border-width: 0 $width/2 $height $width/2;
    border-bottom-color: $color;
  }
  @else if $direction == e {
    border-width: $width/2 0 $width/2 $height;
    border-left-color : $color;
  }
  @else if $direction == s {
    border-width: $height $width/2 0 $width/2;
    border-top-color: $color;
  }
  @else if $direction == w {
    border-width: $width/2 $height $width/2 0;
    border-right-color: $color;
  }

  @else if $direction == ne {
    border-width: 0 $width $height 0;
    border-right-color: $color;
  }
  @else if $direction == se {
    border-width: 0 0 $height $width;
    border-bottom-color: $color;
  }
  @else if $direction == sw {
    border-width: $height 0 0 $width;
    border-left-color: $color;
  }
  @else if $direction == nw {
    border-width: $height $width 0 0;
    border-top-color: $color;
  }
}

// ------------
// PLACEHOLDER
// ------------

@mixin placeholder($base: false) {
  @if $base {
    ::-webkit-input-placeholder { @content; }
    ::-moz-placeholder { @content; }
    :-ms-input-placeholder { @content; }
    :-moz-placeholder { @content; }
  } @else {
    &::-webkit-input-placeholder { @content; }
    &::-moz-placeholder { @content; }
    &:-ms-input-placeholder { @content; }
    &:-moz-placeholder { @content; }
  }
}

// -----------
// ASSET URL
// -----------

@function font-url( $file ) {
  @return url( $font-url + $file);
}

@function image-url( $file ) {
  @return url( $image-url + $file);
}


// CLEARFIX -----

@mixin clearfix() {
  &::before,
  &::after {
    content: "";
    display: table;
  }

  &::after {
    clear: both;
  }
}