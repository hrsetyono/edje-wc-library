$include-normalize: false !default;
$include-grid: false !default;
$include-tile: false !default;
$include-typography: false !default;
$include-visibility: false !default;
$include-colors: false !default;
$output-framework: false !default;


@if $output-framework {
  /* EDJE Framework 3.0 - hrsetyono.github.io/edje */
}

// ------------
// NORMALIZER
// ------------
// Based on git.io/normalize v3.0.3

@if $output-framework and $include-normalize {
  *,
  *:before,
  *:after {
    -webkit-box-sizing: border-box;
    -moz-box-sizing: border-box;
    box-sizing: border-box;
  }
  
  html {
    font-family: sans-serif;
    -webkit-text-size-adjust: 100%;
    -ms-text-size-adjust: 100%;
  }
  
  // Basic reset margin and padding
  *, body {
    margin: 0;
    padding: 0;
  }
  
  // Correct `block` display
  article,
  aside,
  details,
  figcaption,
  figure,
  footer,
  header,
  hgroup,
  main,
  nav,
  section,
  picture,
  summary {
    display: block;
  }
  
  
  // Correct `inline-block` display
  audio,
  canvas,
  progress,
  video {
    display: inline-block;
  }
  audio:not([controls]) {
    display: none;
    height: 0;
  }
  
  // Webkit sibling selector fix
  body { -webkit-animation: bugfix infinite 1s; }
  @-webkit-keyframes bugfix {
    from { padding: 0; }
    to { padding: 0; }
  }
  
  // Reset anchor styling
  a {
    cursor: pointer;
    text-decoration: none;
    background-color: transparent;
  
    // &:focus { outline: none; }
    &:active, &:hover { outline: 0; }
  }
  
  // Basic typography
  b, strong { font-weight: bold; }
  em { font-style: italic; }
  h1, h2, h3, h4, h5, h6 { margin: 0; }
  
  // Media
  img {
    border: 0;
    display: inline-block;
    vertical-align: middle;
    -ms-interpolation-mode: bicubic;
  }
  svg:not(:root) { overflow: hidden; }
  figure { margin: 0; }
  
  // A better looking default horizontal rule
  hr {
    -moz-box-sizing: content-box;
    box-sizing: content-box;
    display: block;
    height: 1px;
    margin: 1em 0;
    padding: 0;
    border: 0;
    border-top: 1px solid #ccc;
  }
  
  blockquote cite {
    display: block;
    font-style: italic;
  }
  
  // Code block
  pre { overflow: auto; }
  code, kbd, pre, samp {
    font-family: monospace, monospace;
    font-size: 1em;
  }
  
  // Embedded content
  img,
  object,
  embed {
    max-width: 100%;
    height: auto;
  
    #map_canvas &,
    .map_canvas & {
      max-width: none !important;
    }
  }
  object, embed { height: 100%; }
  
  // Address styling
  [hidden], template { display: none; }
  address, cite { font-style: normal; }
  abbr[title] { border-bottom: 1px dotted; }
  dfn { font-style: italic; }
  mark { background: #ff0; color: #000; }
  
  // Misc inline elements
  q { quotes: "\201C" "\201D" "\2018" "\2019"; }
  small { font-size: 80%; }
  sub, sup { font-size: 75%; line-height: 0; position: relative; vertical-align: baseline; }
  sup { top: -0.5em; }
  sub { bottom: -0.25em; }
  
  // Form styling -----------
  button,
  input,
  optgroup,
  select,
  textarea {
    outline: none;
    margin: 0;
    color: inherit;
    font: inherit;
  }
  
  button, input[type="submit"] {
    overflow: visible;
    cursor: pointer;
    outline: none;
    -webkit-backface-visibility: hidden;
  
    &:focus { outline: none; }
  }
  
  button, select { text-transform: none; }
  optgroup { font-weight: bold; }
  button, input, label { line-height: normal; }
  label { display: block; }
  button, input, select, textarea {
    font-family: inherit;
    font-size: 100%;
    margin: 0;
  }
  
  button,
  html input[type="button"],
  input[type="reset"],
  input[type="submit"] {
    -webkit-appearance: button;
    cursor: pointer;
  }
  
  button[disabled],
  html input[disabled] { cursor: default; }
  
  button::-moz-focus-inner,
  input::-moz-focus-inner { border: 0; padding: 0; }
  
  input { line-height: normal; }
  
  input[type="checkbox"],
  input[type="radio"] { box-sizing: border-box; padding: 0; }
  
  input[type="number"]::-webkit-inner-spin-button,
  input[type="number"]::-webkit-outer-spin-button {
    height: auto;
  }
  
  input[type="search"] {
    -webkit-appearance: textfield;
  
    &::-webkit-search-cancel-button,
    &::-webkit-search-decoration {
      -webkit-appearance: none;
    }
  }
  
  // Disable Chrome's datepicker
  input::-webkit-calendar-picker-indicator{ display: none; }
  input[type="date"]::-webkit-input-placeholder{ visibility: hidden !important; }
  
  textarea {
    overflow: auto;
    vertical-align: top;
    resize: vertical; // only vertical resizing
    height: auto;
    min-height: 50px;
  }
  
  legend { border: 0; padding: 0; }
  fieldset {
    border: 0;
    margin: 0;
    padding: 0;
  }
  
  // Table
  table {
    border-collapse: collapse;
    border-spacing: 0;
  }
  td, th { padding: 0; }
  
  .hide { display: none !important; visibility: hidden !important; }
  
  .flex-iframe {
    overflow: hidden; position: relative;
    height: 0; padding-bottom: 67.5%; padding-top: 1.38889rem;
  
    iframe,
    object,
    embed,
    video {
      position: absolute; top: 0; left: 0;
      height: 100%; width: 100%; }
  }
  
} // include-normalize


// ------------
// GRID SYSTEM
// ------------

@mixin grid(
  $columns: false,
  $gap: false,
  $rim: false,
  $width: false,
  $collapse: false ) {

  @if $columns {
    grid-template-columns: repeat( $columns, 1fr );
  }

  @if $gap {
    grid-column-gap: $gap;
  }

  @if $width and $rim {
    max-width: $width + ($rim * 2);
    padding: 0 $rim;
  }
  @else if $width {
    max-width: $width + ($grid-rim * 2);
  }
  @else if $rim {
    padding-right: $rim;
    padding-left: $rim;
  }

  @if $collapse {
    grid-column-gap: 0;
  }
}

@mixin column(
  $span: false,
  $span-s: false,
  $span-xs: false,
) {
  @if $span {
    grid-column: span #{ $span }; 
  }

  @if $span-s {
    @media ($below-s) {
      grid-column: span #{ $span_s };
    }
  }

  @if $span-xs {
    @media ($below-xs) {
      grid-column: span #{ $span_xs };
    }
  }
}


/////

@if $output-framework and $include-grid {

// Grid wrapper
h-grid {
  @include h( d-grid );
  @include grid( $grid-columns );
  @include grid( $gap: $grid-gap );
  @include grid( $width: $grid-max-width );
  @include grid( $rim: $grid-rim );
  margin: 0 auto;
  width: 100%;

  &.collapse {
    @include grid( $collapse: true );
  }

  h-grid {
    margin: 0;
    padding: 0;
  }
}

// Column
@for $i from 1 through $grid-columns {
  .large-#{$i} {
    @include column( $i );
  }
}

// Small column
@media ($below-s) {
  // reset
  [class*="large-"] {
    @include column( $grid-columns );
  }

  @for $i from 1 through $grid-columns {
    .small-#{$i} {
      @include column( $i );
    }
  }
}


} // include-grid



// -------------
// TILE SYSTEM
// -------------

@mixin tile(
  $per_row: false,
  $per_row_s: false,
  $per_row_xs: false,
  $gap: false,
  $collapse: false ) {

  @if $per_row {
    grid-template-columns: repeat( $per_row, 1fr );

    @if $per_row_s {
      @media ($below-s) {
        grid-template-columns: repeat( $per_row_s, 1fr );
      }
    }

    @if $per_row_xs {
      @media ($below-xs) {
        grid-template-columns: repeat( $per_row_xs, 1fr );
      }
    }
  }

  @if $gap {
    grid-column-gap: $gap;
    grid-row-gap: $gap;
  }

  @if $collapse {
    grid-column-gap: 0;
  }

}


@if $output-framework and $include-tile {

h-tile {
  @include h( d-grid );
  @include tile( $gap: $tile-gap );

  &.collapse {
    @include tile( $collapse: true );
  }

  > * {
    grid-column: span 1;
  }
}

@for $i from 1 through $tile-max {
  .tile-#{$i} {
    @include tile( $i );
  }
}

@media ($below-s) {
  // reset
  [class*="tile-"] { @include tile(1); }

  @for $i from 1 through $tile-max {
    .small-tile-#{$i} {
      @include tile( $i );
    }
  }
}

} // include-tile


// ------------
// TYPOGRAPHY
// ------------

%h1 { @include font-sizes( $h1 ); }
%h2 { @include font-sizes( $h2 ); }
%h3 { @include font-sizes( $h3 ); }
%h4 { @include font-sizes( $h4 ); }
%h5 { @include font-sizes( $h5 ); }
%h6 { @include font-sizes( $h6 ); }


@if $output-framework and $include-typography {

body {
  position: relative;
  background: $body-background;

  font-size: $font-size;
  font-family: $font-family;
  font-weight: $font-weight;
  line-height: $font-line;
  color: $font-color;
}

p {
  margin-top: 0;
  margin-bottom: 0;
}

a {
  color: $color-link;
  transition: $g-transition;

  &:hover { color: $color-link-hover; }
}

h1, h2, h3, h4, h5, h6 {
  font-family: $font-family-header;
  font-weight: $header-weight;
  line-height: $header-line;
  color: $header-color;

  letter-spacing: $header-spacing;
  text-transform: $header-transform;
}


h1 { @extend %h1; }
h2 { @extend %h2; }
h3 { @extend %h3; }
h4 { @extend %h4; }
h5 { @extend %h5; }
h6 { @extend %h6; }

// ----- LIST -----

ul {
  list-style-type: $ul-parent;

  ul { list-style-type: $ul-child; }
}

ol {
  list-style-type: $ol-parent;

  ol { list-style-type: $ol-child; }
}


// Create font-face declaration
@each $name, $files in $font-faces {
  @each $file, $weight, $style in $files {
    @font-face {
      src: font-url($file);
      font-family: $name;
      font-weight: $weight;
      font-style: $style;
    }
  }
}


} // include-typography



// -----------
// VISIBILITY
// -----------

@if $output-framework and $include-visibility {

  @media ($above-s) {
    .hide-for-l,
    .show-for-s {
      display: none !important;
    }
  }
  
  @media ($below-s) {
    .hide-for-s,
    .show-for-l {
      display: none !important;
    }
  }
  
  @media ($above-xs) {
    .show-for-xs {
      display: none !important;
    }
  }
  
  @media ($below-xs) {
    .hide-for-xs {
      display: none !important;
    }
  }
  
  } // include-visibility


// ------------
// ROOT COLORS
// ------------

@if $output-framework and $include-colors {
  :root {
    @each $name, $value in $h-colors {
      --#{ $name }: #{ $value };
      --#{ $name }RGB: #{ round(red($value)) }, #{ round(green($value)) }, #{ round(blue($value)) };
    }
  }
}

// Separator

@if $output-framework {
  /* ----- */
}